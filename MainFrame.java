
/*
 * MainFrame.java
 *
 * Created on Dec 28, 2012, 12:40:12 PM
 */

package cn.ac.picb.ui;

import java.awt.Color;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Iterator;
import java.util.Vector;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu.Separator;
import javax.swing.KeyStroke;
import javax.swing.SwingConstants;
import javax.swing.WindowConstants;

import org.jdesktop.layout.GroupLayout;
import org.jdesktop.layout.LayoutStyle;
//import javax.swing.UIManager;
//import javax.swing.UIManager.LookAndFeelInfo;
//import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author young
 */
public class MainFrame extends JFrame {

    /** Creates new form MainFrame */
    public MainFrame() {
        initComponents();
        setLocationRelativeTo(null);
        //thread = new Thread(new ShufflingThread2(this));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {

        jPanel1 = new JPanel();
        congLabel = new JLabel();
        picLabel = new JLabel();
        jPanel2 = new JPanel();
        stopButton = new JButton();
        startButton = new JButton();
        jMenuBar1 = new JMenuBar();
        jMenu1 = new JMenu();
        loadMenuItem = new JMenuItem();
        saveMenuItem = new JMenuItem();
        jSeparator1 = new Separator();
        exitMenuItem = new JMenuItem();
        jMenu2 = new JMenu();
        aboutMenuItem = new JMenuItem();
        
        setResizable(false);
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        congLabel.setFont(new java.awt.Font("Lucida Grande", 1, 32)); // NOI18N
        congLabel.setHorizontalAlignment(SwingConstants.CENTER);
        congLabel.setText("Welcome");

        picLabel.setHorizontalAlignment(SwingConstants.CENTER);
        picLabel.setIcon(new ImageIcon("images/default.jpg"));
        //picLabel.setText("jLabel2");
        picLabel.setHorizontalTextPosition(SwingConstants.CENTER);

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(congLabel, GroupLayout.DEFAULT_SIZE, 772, Short.MAX_VALUE))
                    .add(jPanel1Layout.createSequentialGroup()
                        //.add(270, 270, 270)
                        .add(picLabel, GroupLayout.DEFAULT_SIZE, 772, Short.MAX_VALUE)
                        ))//.add(261, 261, 261)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(congLabel, GroupLayout.PREFERRED_SIZE, 59, GroupLayout.PREFERRED_SIZE)
                .add(33, 33, 33)
                .add(picLabel, GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE)
                .addContainerGap())
        );

        stopButton.setText("STOP");
        stopButton.setEnabled(false);
        stopButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        startButton.setText("START");
        startButton.setEnabled(false);
        startButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        GroupLayout jPanel2Layout = new GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(GroupLayout.LEADING)
            .add(GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(628, Short.MAX_VALUE)
                .add(startButton)
                .addPreferredGap(LayoutStyle.RELATED)
                .add(stopButton)
                .addContainerGap())
        );

        jPanel2Layout.linkSize(new java.awt.Component[] {startButton, stopButton}, GroupLayout.HORIZONTAL);

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(GroupLayout.LEADING)
            .add(GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel2Layout.createParallelGroup(GroupLayout.BASELINE)
                    .add(stopButton)
                    .add(startButton))
                .addContainerGap())
        );

        jMenu1.setText("File");

        loadMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_L, InputEvent.CTRL_MASK));
        loadMenuItem.setText("Load");
        loadMenuItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                loadMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(loadMenuItem);
        
        saveMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, InputEvent.CTRL_MASK));
        saveMenuItem.setText("Save");
        saveMenuItem.setEnabled(false);
        saveMenuItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(saveMenuItem);
        
        jMenu1.add(jSeparator1);

        exitMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q, InputEvent.CTRL_MASK));
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(exitMenuItem);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("About");

        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(aboutMenuItem);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.LEADING)
            .add(jPanel2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.LEADING)
            .add(GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(LayoutStyle.RELATED)
                .add(jPanel2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }

    private void exitMenuItemActionPerformed(ActionEvent evt) {
        System.exit(0);
    }

    private void stopButtonActionPerformed(ActionEvent evt) {
        thread.changeFlagStop();
        String congStr = "Congratulate " + names.get(index).toUpperCase();
        congLabel.setForeground(Color.RED);
        congLabel.setText(congStr);
        if(selected==null)
            selected = new Vector<String>();
        selected.add(names.get(index));
        isSaved = false;
        saveMenuItem.setEnabled(true);
        names.removeElementAt(index);//remove the individual has been chosen
    	startButton.setEnabled(true);
        stopButton.setEnabled(false);
        //JOptionPane.showMessageDialog(this, "Congratulations to "+congLabel.getText()+" !" );
        
    }

    private void startButtonActionPerformed(ActionEvent evt) {
        if(names==null || names.size()==0){
        	JOptionPane.showMessageDialog(null, "No elements left! Please reLoad!","Empty List",JOptionPane.WARNING_MESSAGE);
        	startButton.setEnabled(false);
        	stopButton.setEnabled(false);
        	return;
        }
        else{
        	thread = new ShufflingThread(this);
        	congLabel.setForeground(Color.BLACK);
        	thread.changeFlagStart();
        	startButton.setEnabled(false);
        	stopButton.setEnabled(true);
        	stopButton.requestFocus();
        }
    }

    private void aboutMenuItemActionPerformed(ActionEvent evt) {
        new AboutFrame(this).setVisible(true);
    }

    private void loadMenuItemActionPerformed(ActionEvent evt) {
        JFileChooser jfc = new JFileChooser();
        File curDirectory = new File(".");
        jfc.setCurrentDirectory(curDirectory); //set current directory as default
        int retVal = jfc.showOpenDialog(this);
        if( retVal==JFileChooser.APPROVE_OPTION){
        	File file = jfc.getSelectedFile();
        	BufferedReader br = null;
        	try{
        		br = new BufferedReader(new FileReader(file));
        		String line;
        		names = new Vector<String>();
        		while((line=br.readLine())!=null){        			
        			names.add(line);
        		}
        		br.close();
        		startButton.setEnabled(true);
        		startButton.requestFocus();
        	}catch(IOException ex){
        		ex.printStackTrace();
        	}
        }
    }
    
    private void saveMenuItemActionPerformed(ActionEvent evt) {
        if(selected==null || selected.size()==0 || isSaved){
        	JOptionPane.showMessageDialog(null, "No results need to be saved!","Already Saved",JOptionPane.WARNING_MESSAGE);
        	saveMenuItem.setEnabled(false);
        	return;
        }
        else{
        	JFileChooser jfc= new JFileChooser();
        	jfc.setCurrentDirectory(new File("."));//set current directory as default
        	int retVal = jfc.showSaveDialog(this);
        	if(retVal == JFileChooser.APPROVE_OPTION){
        		File file = jfc.getSelectedFile();
        		BufferedWriter br = null;
        		try{
        			br = new BufferedWriter(new FileWriter(file));
        			Iterator<String> iter = selected.iterator();
        			while(iter.hasNext()){
        				br.write(iter.next());
        				br.newLine();
        			}
        			br.flush();
        			br.close();
        			isSaved=true;
        			saveMenuItem.setEnabled(false);
        			
        		}catch(IOException ex){
        			ex.printStackTrace();
        		}
        	}
        }
    }
    
   
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
    	//change lookAndFeel
    	/*try {
    	    for (LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
    	        if ("Nimbus".equals(info.getName())) {
    	            UIManager.setLookAndFeel(info.getClassName());
    	            break;
    	        }
    	    }
    	} catch (UnsupportedLookAndFeelException e) {
    	    
    	} catch (ClassNotFoundException e) {
    	    
    	} catch (InstantiationException e) {
    	    
    	} catch (IllegalAccessException e) {
    	    
    	}*/
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration 
    private JMenuItem aboutMenuItem;
    private JMenuItem exitMenuItem;
    private JMenu jMenu1;
    private JMenu jMenu2;
    private JMenuBar jMenuBar1;
    private JPanel jPanel1;
    private JPanel jPanel2;
    private Separator jSeparator1;
    private JMenuItem loadMenuItem;
    private JMenuItem saveMenuItem;
    private JButton startButton;
    private JButton stopButton;
    JLabel congLabel;
    JLabel picLabel;
    Vector<String> names;
    Vector<String> selected;
    ShufflingThread thread;
    int index;
    boolean isSaved;
    // End of variables declaration

}

